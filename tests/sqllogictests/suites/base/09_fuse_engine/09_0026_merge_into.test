statement ok
set enable_experimental_merge_into = 1;

statement ok
set enable_distributed_merge_into = 1;

statement ok
drop table if exists t1;

statement ok
drop table if exists t2;

statement ok
create table t1(a int,b string, c string);

statement ok
create table t2(a int,b string, c string);

statement ok
insert into t1 values(1,'b1','c1'),(2,'b2','c2');

statement ok
insert into t1 values(2,'b3','c3'),(3,'b4','c4');

query TTT
select * from t1 order by a,b,c;
----
1 b1 c1
2 b2 c2
2 b3 c3
3 b4 c4

statement ok
insert into t2 values(1,'b_5','c_5'),(3,'b_6','c_6');

statement ok
insert into t2 values(2,'b_7','c_7');

query TTT
select * from t2 order by a,b,c;
----
1 b_5 c_5
2 b_7 c_7
3 b_6 c_6

## test source alias 
statement error 1005
merge into t1 using (select * from t2 ) on t1.a = t2.a  when matched then update set t1.c = t2.c,t1.c = t2.c;

# section I: basic test for match and unmatch

statement error 1006
merge into t1 using (select * from t2 ) as t2 on t1.a = t2.a  when matched then update set t1.c = t2.c,t1.c = t2.c;

statement ok
merge into t1 using (select * from t2 ) as t2 on t1.a = t2.a  when matched then update set t1.c = t2.c;

query TTT
select * from t1 order by a,b,c;
----
1 b1 c_5
2 b2 c_7
2 b3 c_7
3 b4 c_6

statement ok
insert into t2 values(4,'b_8','c_8');

query TTT
select * from t2 order by a,b,c;
----
1 b_5 c_5
2 b_7 c_7
3 b_6 c_6
4 b_8 c_8

statement ok
merge into t1 using (select * from t2 ) as t2 on t1.a = t2.a  when matched then update set t1.c = t2.c  when not matched then insert (a,b,c) values(t2.a,t2.b,t2.c);

query TTT
select * from t1 order by a,b,c;
----
1 b1 c_5
2 b2 c_7
2 b3 c_7
3 b4 c_6
4 b_8 c_8

statement ok
insert into t2 values(1,'b_9','c_9');

statement error 4001
merge into t1 using (select * from t2 ) as t2 on t1.a = t2.a  when matched then update set t1.c = t2.c  when not matched then insert (a,b,c) values(t2.a,t2.b,t2.c);

query TTT
select * from t1 order by a,b,c;
----
1 b1 c_5
2 b2 c_7
2 b3 c_7
3 b4 c_6
4 b_8 c_8

statement ok
delete from t2 where a = 1;

query TTT
select * from t2 order by a,b,c;
----
2 b_7 c_7
3 b_6 c_6
4 b_8 c_8

statement ok
insert into t2 values(5,'b_9','c_9');

query TTT
select * from t2 order by a,b,c;
----
2 b_7 c_7
3 b_6 c_6
4 b_8 c_8
5 b_9 c_9

statement ok
merge into t1 using (select * from t2 ) as t2 on t1.a = t2.a  when matched then delete;

query ITT
select * from t1 order by a,b,c;
----
1 b1 c_5

# section 2 multi clauses
statement ok
insert into t1 values(2,'b_1','c_1'),(3,'b_2','c_2');

query TTT
select * from t1 order by a,b,c;
----
1 b1 c_5
2 b_1 c_1
3 b_2 c_2

statement error 1065
merge into t1 using (select * from t2 ) as t2 on t1.a = t2.a  when matched then delete when matched then update set t1.c = t2.c when not matched and t2.c = 'c_8' then insert (a,b,c) values(t2.a,t2.b,t2.c);

statement ok
merge into t1 using (select * from t2 ) as t2 on t1.a = t2.a  when matched and t1.b = 'b_1' then delete when matched then update set t1.c = t2.c when not matched and t2.c = 'c_8' then insert (a,b,c) values(t2.a,t2.b,t2.c);

query TTT
select * from t1 order by a,b,c;
----
1 b1 c_5
3 b_2 c_6
4 b_8 c_8

statement ok
merge into t1 using (select * from t2 ) as t2 on t1.a = t2.a  when matched then delete when not matched and t2.c = 'c_9' then insert (a,b,c) values(t2.a,t2.b,t2.c);

query TTT
select * from t1 order by a,b,c;
----
1 b1 c_5
5 b_9 c_9

statement ok
merge into t1 using (select * from t2 ) as t2 on t1.a = t2.a when not matched and t2.c = 'c_8' then insert (a,b) values(t2.a,t2.b) when not matched and t2.c = 'c_7' then insert (a,c) values(t2.a,t2.c);

query TTT
select * from t1 order by a,b,c;
----
1 b1 c_5
2 NULL c_7
4 b_8 NULL
5 b_9 c_9

statement ok
insert into t2 values(5,'b_10','c_10');

query TTT
select * from t2 order by a,b,c;
----
2 b_7 c_7
3 b_6 c_6
4 b_8 c_8
5 b_10 c_10
5 b_9 c_9

statement error 4001
merge into t1 using (select * from t2 ) as t2 on t1.a = t2.a when matched and t2.c = 'c_9' then update set t1.b = 'b_11' when matched and t2.c = 'c_10' then delete;

## idempotent delete test
statement ok
merge into t1 using (select * from t2 ) as t2 on t1.a = t2.a when matched then delete;

query TTT
select * from t1 order by a,b,c;
----
1 b1 c_5

## test star for merge into
statement ok
truncate table t1;

statement ok
truncate table t2;

query I
select count(*) from t1;
----
0

query I
select count(*) from t2;
----
0

statement ok
insert into t1 values(1,'b1','c1'),(2,'b2','c2');

query TTT
select * from t1 order by a,b,c;
----
1 b1 c1
2 b2 c2

statement ok
insert into t2 values(1,'b3','c3'),(3,'b4','c4');

query TTT
select * from t2 order by a,b,c;
----
1 b3 c3
3 b4 c4

## test insert columns mismatch
statement error 1065
merge into t1 using (select * from t2 ) as t2 on t1.a = t2.a when not matched then insert values(t2.a,t2.c);

statement ok
merge into t1 using (select * from t2 ) as t2 on t1.a = t2.a  when matched then update *  when not matched then insert *;

query TTT
select * from t1 order by a,b,c;
----
1 b3 c3
2 b2 c2
3 b4 c4

## test multi same name for star
statement error 1065
merge into t1 using (select a,b,c,a from t2 ) as t2 on t1.a = t2.a  when matched then update *;

statement error 1065
merge into t1 using (select a,b,c,a,b from t2 ) as t2 on t1.a = t2.a  when not matched then insert *;

## stage file test
statement ok
drop table if exists test_stage;

statement ok
drop table if exists target_table;

statement ok
create table target_table(a int,b string,c string);

statement ok
insert into target_table values(1,'a_1','b_1'),(2,'a_2','b_2');

query TTT
select * from target_table order by a,b,c;
----
1 a_1 b_1
2 a_2 b_2

statement ok
create table test_stage(a int,b string,c string);

statement ok
insert into test_stage values(1,'a1','b1'),(2,'a2','b2'),(3,'a3','b3');

query TTT
select * from test_stage order by a,b,c;
----
1 a1 b1
2 a2 b2
3 a3 b3

statement ok
drop stage if exists s5_merge_into;

statement ok
drop stage if exists s4_merge_into;

statement ok
create stage s5_merge_into FILE_FORMAT = (TYPE = CSV);

statement ok
remove @s5_merge_into;

statement ok
copy into @s5_merge_into from (select a,b,c from test_stage order by a,b,c);

query TTT
select $1,$2,$3 from @s5_merge_into order by $1,$2,$3;
----
1 a1 b1
2 a2 b2
3 a3 b3

## test CSV
statement ok
merge into target_table using (select $1,$2,$3 from @s5_merge_into) as cdc on cast(cdc.$1 as int) = target_table.a when matched then delete when not matched then insert values(cdc.$1,cdc.$2,cdc.$3);

query TTT
select * from target_table order by a,b,c;
----
3 a3 b3

## test parquet
statement ok
truncate table target_table;

query I
select count(*) from target_table;
----
0

statement ok
create stage s4_merge_into FILE_FORMAT = (TYPE = PARQUET);

statement ok
remove @s4_merge_into;

statement ok
copy into @s4_merge_into from (select a,b,c from test_stage order by a,b,c);

query TTT
select $1,$2,$3 from @s4_merge_into order by $1,$2,$3;
----
1 a1 b1
2 a2 b2
3 a3 b3

statement ok
insert into target_table values(1,'a_1','b_1'),(2,'a_2','b_2');

query TTT
select * from target_table order by a,b,c;
----
1 a_1 b_1
2 a_2 b_2

statement ok
merge into target_table using (select $1,$2,$3 from @s4_merge_into) as cdc on cdc.$1 = target_table.a when matched then delete when not matched then insert values(cdc.$1,cdc.$2,cdc.$3);

query TTT
select * from target_table order by a,b,c;
----
3 a3 b3

## NULL test, for join, if join_expr result is
## NULL, it will be treated as not macthed.
statement ok
truncate table t1;

statement ok
truncate table t2;

query I
select count(*) from t1;
----
0

query I
select count(*) from t2;
----
0

statement ok
insert into t1 values(NULL,'b_1','c_1');

query TTT
select * from t1 order by a,b,c;
----
NULL b_1 c_1

statement ok
insert into t2 values(1,'b_4','c_4'),(2,'b_2','c_2'),(NULL,'b_3','c_3');

query TTT
select * from t2 order by a,b,c;
----
1 b_4 c_4
2 b_2 c_2
NULL b_3 c_3

statement ok
merge into t1 using (select * from t2) as t2 on t1.a = t2.a when matched then delete when not matched then insert *;

query TTT
select * from t1 order by a,b,c;
----
1 b_4 c_4
2 b_2 c_2
NULL b_1 c_1
NULL b_3 c_3

statement ok
merge into t1 using (select * from t2) as t2 on t1.a = t2.a when matched then delete;

query TTT
select * from t1 order by a,b,c;
----
NULL b_1 c_1
NULL b_3 c_3

statement ok
truncate table t1;

statement ok
truncate table t2;

query I
select count(*) from t1;
----
0

query I
select count(*) from t2;
----
0

## test target table alias
statement ok
insert into t2 values(1,'a1','b1');

statement ok
merge into t1 as t3 using (select * from t2 ) as t2 on t3.a = t2.a  when not matched  then insert (a,b,c) values(t2.a,t2.b,t2.c);

query TTT
select * from t1 order by a,b,c;
----
1 a1 b1

statement ok
CREATE TABLE employees (employee_id INT, employee_name VARCHAR(255),department VARCHAR(255));

statement ok
CREATE TABLE salaries (employee_id INT,salary DECIMAL(10, 2));

statement ok
INSERT INTO employees VALUES(1, 'Alice', 'HR'),(2, 'Bob', 'IT'),(3, 'Charlie', 'Finance'),(4, 'David', 'HR');

statement ok
INSERT INTO salaries VALUES(1, 50000.00),(2, 60000.00);

statement ok
MERGE INTO salaries USING (SELECT * FROM employees) as employees ON salaries.employee_id = employees.employee_id WHEN MATCHED AND employees.department = 'HR' THEN UPDATE SET salaries.salary = salaries.salary + 1000.00 WHEN MATCHED THEN UPDATE SET salaries.salary = salaries.salary + 500.00 WHEN NOT MATCHED THEN INSERT (employee_id, salary) VALUES (employees.employee_id, 55000.00);

query TTT
select * from salaries order by employee_id;
----
1 51000.00
2 60500.00
3 55000.00
4 55000.00

## null cast bug fix
statement ok
create table t1_target(a int not null);

statement ok
create table t2_source(a int not null);

statement ok
insert into t1_target values(1);

statement ok
insert into t2_source values(1),(2);

statement ok
merge into t1_target using (select * from t2_source) as t2_source on t1_target.a = t2_source.a when matched then update * when not matched then insert *;

query T
select * from t1_target order by a;
----
1
2

## cluster table test
statement ok
create table cluster_target(a int,b string,c int) cluster by(a,b);

statement ok
create table cluster_source(a int,b string,c int);

statement ok
insert into cluster_source values(12,'b',1),(1,'a',2),(2,'b',3),(2,'a',4),(3,'a',3);

## test update indetify error
statement error 1006
merge into cluster_target as t1 using (select * from cluster_source) as t2 on t1.a = t2.a when matched then update set cluster_target.a = t2.a;

statement error 1006
merge into cluster_target as t1 using (select * from cluster_source) as t2 on t1.a = t2.a when matched then update set t2.a = t2.a;

statement ok
merge into cluster_target as t1 using (select * from cluster_source) as t2 on t1.a = t2.a when not matched then insert *;

# By default setting, all rows merged from  `cluster_source` will be resident in a single block of `cluster_target`,
# as table `cluster_target` is clustered by `(a,b)`,  the rows inside the one block are assumed to be sorted 
# by `(a, b)`,  consequently, the result of the following query should be ordered by `(a,b)` without an explicit 
# `order by` clause.
query TTT
select * from cluster_target;
----
1 a 2
2 a 4
2 b 3
3 a 3
12 b 1

## add more tests
statement ok
drop table if exists target_test;

statement ok
drop table if exists source_test;

statement ok
create table target_test(a int,b string);

statement ok
insert into target_test values(1,'a'),(2,'b'),(3,'c');

statement ok
create table source_test(a int,b string,delete_flag bool);

statement ok
insert into source_test values(1,'d',true),(2,'e',true),(3,'f',false),(4,'e',true),(5,'f',false);

statement ok
create stage source_parquet file_format = (type = parquet);

statement ok
remove @source_parquet;

statement ok
copy into @source_parquet from (select * from source_test);

statement ok
merge into `target_test` as tt using (select `a`,`b`,`delete_flag` from @source_parquet (pattern => '.*[.]parquet')) as ss on (ss.`a` = tt.`a`) 
when matched and ss.`delete_flag` = true then delete when matched then update * when not matched and ss.`delete_flag` = false then insert *;

query TT
select * from target_test order by a;
----
3 f
5 f

## test not match cast and predicate index
statement ok
drop table if exists test_order;

statement ok
drop table if exists random_source;

statement ok
create table test_order(id bigint, id1 bigint, id2 bigint, id3 bigint, id4 bigint, id5 bigint, id6 bigint, id7 bigint, s1 varchar, s2 varchar, s3 varchar, s4 varchar, s5 varchar, s6 varchar, s7 varchar, s8 varchar, s9 varchar, s10 varchar, s11 varchar, s12 varchar, s13 varchar, d1 DECIMAL(20, 8), d2 DECIMAL(20, 8), d3 DECIMAL(20, 8), d4 DECIMAL(20, 8), d5 DECIMAL(20, 8), d6 DECIMAL(30, 8), d7 DECIMAL(30, 8), d8 DECIMAL(30, 8), d9 DECIMAL(30, 8), d10 DECIMAL(30, 8),insert_time datetime, insert_time1 datetime, insert_time2 datetime, insert_time3 datetime,i int) CLUSTER BY(to_yyyymmdd(insert_time), id) bloom_index_columns='insert_time,id';

statement ok
create table random_source(id bigint not null, id1 bigint, id2 bigint, id3 bigint, id4 bigint, id5 bigint, id6 bigint, id7 bigint,s1 varchar, s2 varchar, s3 varchar, s4 varchar, s5 varchar, s6 varchar, s7 varchar, s8 varchar, s9 varchar, s10 varchar, s11 varchar, s12 varchar, s13 varchar,d1 DECIMAL(20, 8), d2 DECIMAL(20, 8), d3 DECIMAL(20, 8), d4 DECIMAL(20, 8), d5 DECIMAL(20, 8), d6 DECIMAL(30, 8), d7 DECIMAL(30, 8), d8 DECIMAL(30, 8), d9 DECIMAL(30, 8), d10 DECIMAL(30, 8),insert_time datetime not null, insert_time1 datetime, insert_time2 datetime, insert_time3 datetime,i int) Engine = Random; 

statement ok
merge into test_order as t using (select id,34 as id1,238 as id2, id3, id4, id5, id6, id7,s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13,d1, d2, d3, d4, d5, d6, d7, d8, d9, d10,insert_time,insert_time1,insert_time2,insert_time3,i from random_source limit 1) as s on t.id = s.id and t.insert_time = s.insert_time when matched then update * when not matched then insert *;

## test update list #13297
statement ok
create table t11(a int,b string, c string);

statement ok
create table t12(a int,b string, c string);

statement ok
insert into t11 values(1,'b1','c1'),(2,'b2','c2');

statement ok
insert into t12 values(1,'b_5','c_5'),(3,'b_6','c_6');

statement error 1065
merge into t11 using (select a, c from t12) as t12 on t11.a = t12.a when matched and max(t11.a) > 0 then update set c = t12.c;

statement error 1065
merge into t11 using (select a, c from t12) as t12 on t11.a = t12.a when matched then update set c = count(*);

## test issue #13287
statement ok
create table tt1 (a int, b int);

statement ok
merge into tt1 using(select 10, 20) as tt2 on tt1.a = 1 when not matched and tt1.b = 2 then insert values (10, 20);

query T
select count(*) from tt1;
----
0

## test issue #13367
statement ok
create table tt2(a bool, b variant, c map(string, string));

statement ok
insert into tt2 values (true, '10', {'k1':'v1'}), (false, '20', {'k2':'v2'})

statement ok
merge into tt2 using(select true as x) as t on (x and tt2.a) when matched and tt2.a then update set tt2.b = parse_json('30');

query TTT
select a, b, c from tt2 order by b;
----
0 20 {'k2':'v2'}
1 30 {'k1':'v1'}

## add test: source is table
statement ok
drop table if exists t1;

statement ok
drop table if exists t2;

statement ok
create table t1(a int);

statement ok
create table t2(a int);

statement ok
insert into t1 values(1);

statement ok
insert into t2 values(1),(2);

statement ok
merge into t1 using t2 on t1.a = t2.a when matched then delete when not matched then insert *;

query T
select * from t1;
----
2

statement ok
drop table if exists t1;

statement ok
drop table if exists t2;

statement ok
create table t1(b int);

statement ok
create table t2(a int);

statement ok
insert into t1 values(1);

statement ok
insert into t2 values(1),(2);

statement error 1065
merge into t1 using t2 on t1.a = t2.a when matched then delete when not matched then insert *;

## add more multi matched statement test
statement ok
drop table if exists t1;

statement ok
drop table if exists t2;

statement ok
create table t1(a int,b string,c bool);

statement ok
create table t2(a int,b string,c bool);

statement ok
insert into t1 values(1,'a1',true),(2,'a2',false),(3,'a3',true);

statement ok
insert into t2 values(1,'b1',true),(2,'b2',false),(3,'b3',true);

query TTT
select * from t1;
----
1 a1 1
2 a2 0
3 a3 1

query TTT
select * from t2;
----
1 b1 1
2 b2 0
3 b3 1

statement ok
merge into t1 using t2 on t1.a = t2.a when matched and t1.a = 1 then delete when matched and t1.a = 2 then update * when matched and t1.a = 3 then delete;

query TTT
select * from t1;
----
2 b2 0

statement ok
merge into t1 using t2 on t1.a = t2.a when matched then delete;

query T
select count(*) from t1;
----
0

statement ok
insert into t1 values(1,'a1',true),(2,'a2',false),(3,'a3',true);

statement ok
merge into t1 using t2 on t1.a = t2.a when matched and t1.a = 2 then update * when matched and t1.a = 1 then delete when matched and t1.a = 3 then update *;

query TTT
select * from t1;
----
2 b2 0
3 b3 1

## issue 13454
statement ok
drop table if exists tt1;

statement ok
create table tt1(a bool, b int);

statement ok
insert into tt1 values (true, 1), (false, 2);

statement ok
merge into tt1 using (select 1 as x) as tt2 on (2 > 1) when matched and a then delete;

query TT
select * from tt1;
----
0 2

## issue #13298
statement ok
drop table if exists t11;

statement ok
drop table if exists t12;

statement ok
create table t12 (a int, b int);

statement ok
create table t11 (a int, b int);

statement ok
insert into t11 values (1, 10),(2, 20),(3, 30),(4, 40);

statement ok
insert into t12 values (1, 10),(2, 20),(3, 30),(4, 40);

statement ok
MERGE INTO t11 USING(SELECT NULL AS c0 FROM t12) AS t12 ON (t11.a OR TRUE) WHEN MATCHED AND TRUE THEN DELETE;

query T
select count(*) from t11;
----
0

## test issue #13732
statement ok
CREATE TABLE orders CLUSTER BY (to_yyyymmddhh(created_at), user_id) AS SELECT
    number % 5000 AS order_id,
    number % 10000 AS user_id,
    CASE WHEN (rand() * 10)::int % 2 = 0 THEN 'buy'
         ELSE 'sell'
    END AS order_type,
    CASE WHEN (rand() * 10)::int % 3 = 0 THEN 'BTC'
         WHEN (rand() * 10)::int % 3 = 1 THEN 'ETH'
         ELSE 'XRP'
    END AS asset_type,
    (rand() * 100)::decimal(18, 8) AS quantity,
    (rand() * 1000)::decimal(18, 8) AS price,
    CASE WHEN (rand() * 10)::int % 3 = 0 THEN 'completed'
         WHEN (rand() * 10)::int % 3 = 1 THEN 'pending'
         ELSE 'cancelled'
    END AS status,
    date_add('day', floor(rand() * 10 % 365)::int, '2021-01-01') AS created_at,
    date_add('day', floor(rand() * 10 % 365)::int, '2021-01-01') AS updated_at
FROM numbers(5000);

statement ok
MERGE INTO orders USING
(
    SELECT
        number % 5000 AS order_id,
        number % 100000 AS user_id,
        CASE WHEN (rand() * 10)::int % 2 = 0 THEN 'buy'
             ELSE 'sell'
        END AS order_type,
        CASE WHEN (rand() * 10)::int % 3 = 0 THEN 'BTC'
             WHEN (rand() * 10)::int % 3 = 1 THEN 'ETH'
             ELSE 'XRP'
        END AS asset_type,
        (rand() * 100)::decimal(18, 8) AS quantity,
        (rand() * 1000)::decimal(18, 8) AS price,
        CASE WHEN (rand() * 10)::int % 3 = 0 THEN 'completed'
             WHEN (rand() * 10)::int % 3 = 1 THEN 'pending'
             ELSE 'cancelled'
        END AS status,
        date_add('day', floor(rand() * 10 % 365)::int, '2021-01-01') AS created_at,
        date_add('day', floor(rand() * 10 % 365)::int, '2021-01-01') AS updated_at
    FROM numbers(5000)
) AS source
ON orders.order_id = source.order_id
WHEN MATCHED THEN 
    UPDATE SET
        orders.user_id = source.user_id,
        orders.order_type = source.order_type,
        orders.asset_type = source.asset_type,
        orders.quantity = source.quantity,
        orders.price = source.price,
        orders.status = source.status,
        orders.created_at = source.created_at,
        orders.updated_at = source.updated_at
WHEN NOT MATCHED THEN 
    INSERT (order_id, user_id, order_type, asset_type, quantity, price, status, created_at, updated_at)
    VALUES (source.order_id, source.user_id, source.order_type, source.asset_type, source.quantity, source.price, source.status, source.created_at, source.updated_at);

## test issue #13733
statement ok
MERGE INTO orders AS tt USING
(
    SELECT
        CASE 
            WHEN number % 2 = 0 THEN (number / 2) % 250000
            ELSE (SELECT MAX(order_id) FROM orders) + number + 1
        END AS order_id,
        number % 100000 AS user_id,
        CASE WHEN (rand() * 10)::int % 2 = 0 THEN 'buy'
             ELSE 'sell'
        END AS order_type,
        CASE WHEN (rand() * 10)::int % 3 = 0 THEN 'BTC'
             WHEN (rand() * 10)::int % 3 = 1 THEN 'ETH'
             ELSE 'XRP'
        END AS asset_type,
        (rand() * 100)::decimal(18, 8) AS quantity,
        (rand() * 1000)::decimal(18, 8) AS price,
        CASE WHEN (rand() * 10)::int % 3 = 0 THEN 'completed'
             WHEN (rand() * 10)::int % 3 = 1 THEN 'pending'
             ELSE 'cancelled'
        END AS status,
        date_add('day', floor(rand() * 10 % 365)::int, '2021-01-01') AS created_at,
        date_add('day', floor(rand() * 10 % 365)::int, '2021-01-01') AS updated_at,
        CASE WHEN number % 2 = 0 THEN false ELSE true END AS is_delete
    FROM numbers(5000)
) AS ss
ON (tt.user_id = ss.user_id AND tt.asset_type = ss.asset_type)
WHEN MATCHED AND ss.is_delete = true THEN 
    DELETE
WHEN MATCHED AND ss.is_delete = false THEN 
    UPDATE  * WHEN NOT MATCHED THEN 
    INSERT *;


statement ok
set enable_distributed_merge_into = 0;

statement ok
set enable_experimental_merge_into = 0;
