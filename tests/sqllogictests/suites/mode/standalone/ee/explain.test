## Copyright 2023 Databend Cloud
##
## Licensed under the Elastic License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     https://www.elastic.co/licensing/elastic-license
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.

statement ok
DROP DATABASE IF EXISTS test_index_db

statement ok
CREATE DATABASE test_index_db

statement ok
USE test_index_db

statement ok
DROP TABLE IF EXISTS t1

statement ok
CREATE TABLE t1(a int not null,b int not null) Engine = Fuse

statement ok
DROP AGGREGATING INDEX IF EXISTS idx1

statement ok
CREATE AGGREGATING INDEX idx1 AS SELECT b, SUM(a) FROM t1 WHERE b > 3 GROUP BY b

query T
EXPLAIN SELECT SUM(a), b FROM t1 WHERE b > 3 GROUP BY b
----
AggregateFinal
├── output columns: [SUM(a) (#2), t1.b (#1)]
├── group by: [b]
├── aggregate functions: [sum(a)]
├── estimated rows: 0.00
└── AggregatePartial
    ├── output columns: [SUM(a) (#2), #_group_by_key]
    ├── group by: [b]
    ├── aggregate functions: [sum(a)]
    ├── estimated rows: 0.00
    └── Filter
        ├── output columns: [t1.a (#0), t1.b (#1)]
        ├── filters: [t1.b (#1) > 3]
        ├── estimated rows: 0.00
        └── TableScan
            ├── table: default.test_index_db.t1
            ├── output columns: [a (#0), b (#1)]
            ├── read rows: 0
            ├── read bytes: 0
            ├── partitions total: 0
            ├── partitions scanned: 0
            ├── push downs: [filters: [t1.b (#1) > 3], limit: NONE]
            ├── aggregating index: [SELECT b, SUM(a) FROM test_index_db.t1 WHERE (b > 3) GROUP BY b]
            ├── rewritten query: [selection: [index_col_0 (#0), index_col_1 (#1)]]
            └── estimated rows: 0.00

query T
EXPLAIN SELECT b FROM t1 WHERE b > 3 GROUP BY b
----
AggregateFinal
├── output columns: [t1.b (#1)]
├── group by: [b]
├── aggregate functions: []
├── estimated rows: 0.00
└── AggregatePartial
    ├── output columns: [#_group_by_key]
    ├── group by: [b]
    ├── aggregate functions: []
    ├── estimated rows: 0.00
    └── Filter
        ├── output columns: [t1.b (#1)]
        ├── filters: [t1.b (#1) > 3]
        ├── estimated rows: 0.00
        └── TableScan
            ├── table: default.test_index_db.t1
            ├── output columns: [b (#1)]
            ├── read rows: 0
            ├── read bytes: 0
            ├── partitions total: 0
            ├── partitions scanned: 0
            ├── push downs: [filters: [t1.b (#1) > 3], limit: NONE]
            ├── aggregating index: [SELECT b, SUM(a) FROM test_index_db.t1 WHERE (b > 3) GROUP BY b]
            ├── rewritten query: [selection: [index_col_0 (#0)]]
            └── estimated rows: 0.00

query T
EXPLAIN SELECT SUM(a) + 1 FROM t1 WHERE b > 3 GROUP BY b
----
EvalScalar
├── output columns: [(sum(a) + 1) (#3)]
├── expressions: [SUM(a) (#2) + 1]
├── estimated rows: 0.00
└── AggregateFinal
    ├── output columns: [SUM(a) (#2), t1.b (#1)]
    ├── group by: [b]
    ├── aggregate functions: [sum(a)]
    ├── estimated rows: 0.00
    └── AggregatePartial
        ├── output columns: [SUM(a) (#2), #_group_by_key]
        ├── group by: [b]
        ├── aggregate functions: [sum(a)]
        ├── estimated rows: 0.00
        └── Filter
            ├── output columns: [t1.a (#0), t1.b (#1)]
            ├── filters: [t1.b (#1) > 3]
            ├── estimated rows: 0.00
            └── TableScan
                ├── table: default.test_index_db.t1
                ├── output columns: [a (#0), b (#1)]
                ├── read rows: 0
                ├── read bytes: 0
                ├── partitions total: 0
                ├── partitions scanned: 0
                ├── push downs: [filters: [t1.b (#1) > 3], limit: NONE]
                ├── aggregating index: [SELECT b, SUM(a) FROM test_index_db.t1 WHERE (b > 3) GROUP BY b]
                ├── rewritten query: [selection: [index_col_0 (#0), index_col_1 (#1)]]
                └── estimated rows: 0.00

query T
EXPLAIN SELECT SUM(a) + 1 FROM t1 WHERE b > 5 GROUP BY b
----
EvalScalar
├── output columns: [(sum(a) + 1) (#3)]
├── expressions: [SUM(a) (#2) + 1]
├── estimated rows: 0.00
└── AggregateFinal
    ├── output columns: [SUM(a) (#2), t1.b (#1)]
    ├── group by: [b]
    ├── aggregate functions: [sum(a)]
    ├── estimated rows: 0.00
    └── AggregatePartial
        ├── output columns: [SUM(a) (#2), #_group_by_key]
        ├── group by: [b]
        ├── aggregate functions: [sum(a)]
        ├── estimated rows: 0.00
        └── Filter
            ├── output columns: [t1.a (#0), t1.b (#1)]
            ├── filters: [t1.b (#1) > 5]
            ├── estimated rows: 0.00
            └── TableScan
                ├── table: default.test_index_db.t1
                ├── output columns: [a (#0), b (#1)]
                ├── read rows: 0
                ├── read bytes: 0
                ├── partitions total: 0
                ├── partitions scanned: 0
                ├── push downs: [filters: [t1.b (#1) > 5], limit: NONE]
                ├── aggregating index: [SELECT b, SUM(a) FROM test_index_db.t1 WHERE (b > 3) GROUP BY b]
                ├── rewritten query: [selection: [index_col_0 (#0), index_col_1 (#1)], filter: index_col_0 (#0) > to_int32(5)]
                └── estimated rows: 0.00

query T
EXPLAIN SELECT t1.b, SUM(a) FROM t1 GROUP BY t1.b HAVING SUM(a)=(SELECT SUM(a) FROM t1 t WHERE t1.b=t.b and t.b > 3)
----
Filter
├── output columns: [SUM(a) (#2), t1.b (#1)]
├── filters: [is_true(SUM(a) (#2) = scalar_subquery_5 (#5))]
├── estimated rows: 0.00
└── HashJoin
    ├── output columns: [SUM(a) (#2), t1.b (#1), SUM(a) (#5)]
    ├── join type: LEFT SINGLE
    ├── build keys: [b (#4)]
    ├── probe keys: [CAST(b (#1) AS Int32 NULL)]
    ├── filters: []
    ├── estimated rows: 0.00
    ├── AggregateFinal(Build)
    │   ├── output columns: [SUM(a) (#5), t.b (#4)]
    │   ├── group by: [b]
    │   ├── aggregate functions: [sum(a)]
    │   ├── estimated rows: 0.00
    │   └── AggregatePartial
    │       ├── output columns: [SUM(a) (#5), #_group_by_key]
    │       ├── group by: [b]
    │       ├── aggregate functions: [sum(a)]
    │       ├── estimated rows: 0.00
    │       └── Filter
    │           ├── output columns: [t.a (#3), t.b (#4)]
    │           ├── filters: [t.b (#4) > 3]
    │           ├── estimated rows: 0.00
    │           └── TableScan
    │               ├── table: default.test_index_db.t1
    │               ├── output columns: [a (#3), b (#4)]
    │               ├── read rows: 0
    │               ├── read bytes: 0
    │               ├── partitions total: 0
    │               ├── partitions scanned: 0
    │               ├── push downs: [filters: [t.b (#4) > 3], limit: NONE]
    │               ├── aggregating index: [SELECT b, SUM(a) FROM test_index_db.t1 WHERE (b > 3) GROUP BY b]
    │               ├── rewritten query: [selection: [index_col_0 (#0), index_col_1 (#1)]]
    │               └── estimated rows: 0.00
    └── AggregateFinal(Probe)
        ├── output columns: [SUM(a) (#2), t1.b (#1)]
        ├── group by: [b]
        ├── aggregate functions: [sum(a)]
        ├── estimated rows: 0.00
        └── AggregatePartial
            ├── output columns: [SUM(a) (#2), #_group_by_key]
            ├── group by: [b]
            ├── aggregate functions: [sum(a)]
            ├── estimated rows: 0.00
            └── TableScan
                ├── table: default.test_index_db.t1
                ├── output columns: [a (#0), b (#1)]
                ├── read rows: 0
                ├── read bytes: 0
                ├── partitions total: 0
                ├── partitions scanned: 0
                ├── push downs: [filters: [], limit: NONE]
                └── estimated rows: 0.00

# Disable aggregating index scan
statement ok
SET enable_aggregating_index_scan = 0

query T
EXPLAIN SELECT SUM(a), b FROM t1 WHERE b > 3 GROUP BY b
----
AggregateFinal
├── output columns: [SUM(a) (#2), t1.b (#1)]
├── group by: [b]
├── aggregate functions: [sum(a)]
├── estimated rows: 0.00
└── AggregatePartial
    ├── output columns: [SUM(a) (#2), #_group_by_key]
    ├── group by: [b]
    ├── aggregate functions: [sum(a)]
    ├── estimated rows: 0.00
    └── Filter
        ├── output columns: [t1.a (#0), t1.b (#1)]
        ├── filters: [t1.b (#1) > 3]
        ├── estimated rows: 0.00
        └── TableScan
            ├── table: default.test_index_db.t1
            ├── output columns: [a (#0), b (#1)]
            ├── read rows: 0
            ├── read bytes: 0
            ├── partitions total: 0
            ├── partitions scanned: 0
            ├── push downs: [filters: [t1.b (#1) > 3], limit: NONE]
            └── estimated rows: 0.00

statement ok
SET enable_aggregating_index_scan = 1

statement ok
DROP AGGREGATING INDEX idx1

statement ok
CREATE AGGREGATING INDEX idx1 AS SELECT a + 1 from t1

query T
EXPLAIN SELECT avg(a + 1) from t1
----
EvalScalar
├── output columns: [(sum((a + 1)) / if((count((a + 1)) = 0), 1, count((a + 1)))) (#5)]
├── expressions: [sum((a + 1)) (#3) / CAST(if(CAST(count((a + 1)) (#4) = 0 AS Boolean NULL), 1, count((a + 1)) (#4)) AS UInt64 NULL)]
├── estimated rows: 1.00
└── AggregateFinal
    ├── output columns: [sum((a + 1)) (#3), count((a + 1)) (#4)]
    ├── group by: []
    ├── aggregate functions: [sum(sum_arg_0), count()]
    ├── estimated rows: 1.00
    └── AggregatePartial
        ├── output columns: [sum((a + 1)) (#3), count((a + 1)) (#4)]
        ├── group by: []
        ├── aggregate functions: [sum(sum_arg_0), count()]
        ├── estimated rows: 1.00
        └── EvalScalar
            ├── output columns: [sum_arg_0 (#2)]
            ├── expressions: [t1.a (#0) + 1]
            ├── estimated rows: 0.00
            └── TableScan
                ├── table: default.test_index_db.t1
                ├── output columns: [a (#0)]
                ├── read rows: 0
                ├── read bytes: 0
                ├── partitions total: 0
                ├── partitions scanned: 0
                ├── push downs: [filters: [], limit: NONE]
                ├── aggregating index: [SELECT (a + 1) FROM test_index_db.t1]
                ├── rewritten query: [selection: [index_col_0 (#0)]]
                └── estimated rows: 0.00

# Should not be rewritten
query T
EXPLAIN SELECT b, a + 1 as x from t1 order by x
----
Sort
├── output columns: [t1.b (#1), x (#2)]
├── sort keys: [x ASC NULLS LAST]
├── estimated rows: 0.00
└── EvalScalar
    ├── output columns: [t1.b (#1), x (#2)]
    ├── expressions: [t1.a (#0) + 1]
    ├── estimated rows: 0.00
    └── TableScan
        ├── table: default.test_index_db.t1
        ├── output columns: [a (#0), b (#1)]
        ├── read rows: 0
        ├── read bytes: 0
        ├── partitions total: 0
        ├── partitions scanned: 0
        ├── push downs: [filters: [], limit: NONE]
        └── estimated rows: 0.00

statement ok
DROP AGGREGATING INDEX idx1

statement ok
USE default

statement ok
DROP DATABASE IF EXISTS test_index_db


statement ok
DROP DATABASE IF EXISTS test_virtual_db

statement ok
CREATE DATABASE test_virtual_db

statement ok
USE test_virtual_db

statement ok
drop table if exists t1

statement ok
create table t1 (a int null, v json null) storage_format = 'native'

statement ok
insert into t1 values(1, parse_json('{"a":[1,2,3],"b":{"c":10}}'))

query T
explain select a, v['b'] from t1
----
EvalScalar
├── output columns: [t1.a (#0), v['b'] (#2)]
├── expressions: [get(t1.v (#1), 'b')]
├── estimated rows: 1.00
└── TableScan
    ├── table: default.test_virtual_db.t1
    ├── output columns: [a (#0), v (#1)]
    ├── read rows: 1
    ├── read bytes: 137
    ├── partitions total: 1
    ├── partitions scanned: 1
    ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
    ├── push downs: [filters: [], limit: NONE]
    └── estimated rows: 1.00

query T
explain select a, v['a'][0] from t1
----
EvalScalar
├── output columns: [t1.a (#0), v['a'][0] (#2)]
├── expressions: [get(get(t1.v (#1), 'a'), 0)]
├── estimated rows: 1.00
└── TableScan
    ├── table: default.test_virtual_db.t1
    ├── output columns: [a (#0), v (#1)]
    ├── read rows: 1
    ├── read bytes: 137
    ├── partitions total: 1
    ├── partitions scanned: 1
    ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
    ├── push downs: [filters: [], limit: NONE]
    └── estimated rows: 1.00

statement ok
drop table t1

statement ok
drop table if exists t2

statement ok
create table t2 (a int null, v json null) storage_format = 'parquet'

statement ok
insert into t2 values(1, parse_json('{"a":[1,2,3],"b":{"c":10}}'))

query T
explain select a, v['b'] from t2
----
EvalScalar
├── output columns: [t2.a (#0), v['b'] (#2)]
├── expressions: [get(t2.v (#1), 'b')]
├── estimated rows: 1.00
└── TableScan
    ├── table: default.test_virtual_db.t2
    ├── output columns: [a (#0), v (#1)]
    ├── read rows: 1
    ├── read bytes: 130
    ├── partitions total: 1
    ├── partitions scanned: 1
    ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
    ├── push downs: [filters: [], limit: NONE]
    └── estimated rows: 1.00

query T
explain select a, v['a'][0] from t2
----
EvalScalar
├── output columns: [t2.a (#0), v['a'][0] (#2)]
├── expressions: [get(get(t2.v (#1), 'a'), 0)]
├── estimated rows: 1.00
└── TableScan
    ├── table: default.test_virtual_db.t2
    ├── output columns: [a (#0), v (#1)]
    ├── read rows: 1
    ├── read bytes: 130
    ├── partitions total: 1
    ├── partitions scanned: 1
    ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
    ├── push downs: [filters: [], limit: NONE]
    └── estimated rows: 1.00

statement ok
drop table t2

statement ok
USE default

statement ok
DROP DATABASE IF EXISTS test_virtual_db
