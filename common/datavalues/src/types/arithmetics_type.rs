// Copyright 2021 Datafuse Labs.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This code is generated by common/codegen. DO NOT EDIT.
use crate::IntegerType;
use crate::PrimitiveType;

pub trait ResultTypeOfBinary {
    type AddMul: PrimitiveType;
    type Minus: PrimitiveType;
    type IntDiv: IntegerType;
    type Modulo: PrimitiveType;
    type LeastSuper: PrimitiveType;
}

pub trait ResultTypeOfUnary {
    type Negate: PrimitiveType;
}

impl ResultTypeOfBinary for (u8, u8) {
    type AddMul = u16;
    type Minus = i16;
    type IntDiv = u8;
    type Modulo = u8;
    type LeastSuper = u8;
}

impl ResultTypeOfBinary for (u8, u16) {
    type AddMul = u32;
    type Minus = i32;
    type IntDiv = u16;
    type Modulo = u16;
    type LeastSuper = u16;
}

impl ResultTypeOfBinary for (u8, u32) {
    type AddMul = u64;
    type Minus = i64;
    type IntDiv = u32;
    type Modulo = u32;
    type LeastSuper = u32;
}

impl ResultTypeOfBinary for (u8, u64) {
    type AddMul = u64;
    type Minus = i64;
    type IntDiv = u64;
    type Modulo = u64;
    type LeastSuper = u64;
}

impl ResultTypeOfBinary for (u8, i8) {
    type AddMul = i16;
    type Minus = i16;
    type IntDiv = i8;
    type Modulo = u8;
    type LeastSuper = i16;
}

impl ResultTypeOfBinary for (u8, i16) {
    type AddMul = i32;
    type Minus = i32;
    type IntDiv = i16;
    type Modulo = u16;
    type LeastSuper = i16;
}

impl ResultTypeOfBinary for (u8, i32) {
    type AddMul = i64;
    type Minus = i64;
    type IntDiv = i32;
    type Modulo = u32;
    type LeastSuper = i32;
}

impl ResultTypeOfBinary for (u8, i64) {
    type AddMul = i64;
    type Minus = i64;
    type IntDiv = i64;
    type Modulo = u64;
    type LeastSuper = i64;
}

impl ResultTypeOfBinary for (u8, f32) {
    type AddMul = f64;
    type Minus = f64;
    type IntDiv = i32;
    type Modulo = f64;
    type LeastSuper = f32;
}

impl ResultTypeOfBinary for (u8, f64) {
    type AddMul = f64;
    type Minus = f64;
    type IntDiv = i64;
    type Modulo = f64;
    type LeastSuper = f64;
}

impl ResultTypeOfBinary for (u16, u8) {
    type AddMul = u32;
    type Minus = i32;
    type IntDiv = u16;
    type Modulo = u8;
    type LeastSuper = u16;
}

impl ResultTypeOfBinary for (u16, u16) {
    type AddMul = u32;
    type Minus = i32;
    type IntDiv = u16;
    type Modulo = u16;
    type LeastSuper = u16;
}

impl ResultTypeOfBinary for (u16, u32) {
    type AddMul = u64;
    type Minus = i64;
    type IntDiv = u32;
    type Modulo = u32;
    type LeastSuper = u32;
}

impl ResultTypeOfBinary for (u16, u64) {
    type AddMul = u64;
    type Minus = i64;
    type IntDiv = u64;
    type Modulo = u64;
    type LeastSuper = u64;
}

impl ResultTypeOfBinary for (u16, i8) {
    type AddMul = i32;
    type Minus = i32;
    type IntDiv = i16;
    type Modulo = u8;
    type LeastSuper = i32;
}

impl ResultTypeOfBinary for (u16, i16) {
    type AddMul = i32;
    type Minus = i32;
    type IntDiv = i16;
    type Modulo = u16;
    type LeastSuper = i32;
}

impl ResultTypeOfBinary for (u16, i32) {
    type AddMul = i64;
    type Minus = i64;
    type IntDiv = i32;
    type Modulo = u32;
    type LeastSuper = i32;
}

impl ResultTypeOfBinary for (u16, i64) {
    type AddMul = i64;
    type Minus = i64;
    type IntDiv = i64;
    type Modulo = u64;
    type LeastSuper = i64;
}

impl ResultTypeOfBinary for (u16, f32) {
    type AddMul = f64;
    type Minus = f64;
    type IntDiv = i32;
    type Modulo = f64;
    type LeastSuper = f32;
}

impl ResultTypeOfBinary for (u16, f64) {
    type AddMul = f64;
    type Minus = f64;
    type IntDiv = i64;
    type Modulo = f64;
    type LeastSuper = f64;
}

impl ResultTypeOfBinary for (u32, u8) {
    type AddMul = u64;
    type Minus = i64;
    type IntDiv = u32;
    type Modulo = u8;
    type LeastSuper = u32;
}

impl ResultTypeOfBinary for (u32, u16) {
    type AddMul = u64;
    type Minus = i64;
    type IntDiv = u32;
    type Modulo = u16;
    type LeastSuper = u32;
}

impl ResultTypeOfBinary for (u32, u32) {
    type AddMul = u64;
    type Minus = i64;
    type IntDiv = u32;
    type Modulo = u32;
    type LeastSuper = u32;
}

impl ResultTypeOfBinary for (u32, u64) {
    type AddMul = u64;
    type Minus = i64;
    type IntDiv = u64;
    type Modulo = u64;
    type LeastSuper = u64;
}

impl ResultTypeOfBinary for (u32, i8) {
    type AddMul = i64;
    type Minus = i64;
    type IntDiv = i32;
    type Modulo = u8;
    type LeastSuper = i64;
}

impl ResultTypeOfBinary for (u32, i16) {
    type AddMul = i64;
    type Minus = i64;
    type IntDiv = i32;
    type Modulo = u16;
    type LeastSuper = i64;
}

impl ResultTypeOfBinary for (u32, i32) {
    type AddMul = i64;
    type Minus = i64;
    type IntDiv = i32;
    type Modulo = u32;
    type LeastSuper = i64;
}

impl ResultTypeOfBinary for (u32, i64) {
    type AddMul = i64;
    type Minus = i64;
    type IntDiv = i64;
    type Modulo = u64;
    type LeastSuper = i64;
}

impl ResultTypeOfBinary for (u32, f32) {
    type AddMul = f64;
    type Minus = f64;
    type IntDiv = i32;
    type Modulo = f64;
    type LeastSuper = f64;
}

impl ResultTypeOfBinary for (u32, f64) {
    type AddMul = f64;
    type Minus = f64;
    type IntDiv = i64;
    type Modulo = f64;
    type LeastSuper = f64;
}

impl ResultTypeOfBinary for (u64, u8) {
    type AddMul = u64;
    type Minus = i64;
    type IntDiv = u64;
    type Modulo = u8;
    type LeastSuper = u64;
}

impl ResultTypeOfBinary for (u64, u16) {
    type AddMul = u64;
    type Minus = i64;
    type IntDiv = u64;
    type Modulo = u16;
    type LeastSuper = u64;
}

impl ResultTypeOfBinary for (u64, u32) {
    type AddMul = u64;
    type Minus = i64;
    type IntDiv = u64;
    type Modulo = u32;
    type LeastSuper = u64;
}

impl ResultTypeOfBinary for (u64, u64) {
    type AddMul = u64;
    type Minus = i64;
    type IntDiv = u64;
    type Modulo = u64;
    type LeastSuper = u64;
}

impl ResultTypeOfBinary for (u64, i8) {
    type AddMul = i64;
    type Minus = i64;
    type IntDiv = i64;
    type Modulo = u8;
    type LeastSuper = i64;
}

impl ResultTypeOfBinary for (u64, i16) {
    type AddMul = i64;
    type Minus = i64;
    type IntDiv = i64;
    type Modulo = u16;
    type LeastSuper = i64;
}

impl ResultTypeOfBinary for (u64, i32) {
    type AddMul = i64;
    type Minus = i64;
    type IntDiv = i64;
    type Modulo = u32;
    type LeastSuper = i64;
}

impl ResultTypeOfBinary for (u64, i64) {
    type AddMul = i64;
    type Minus = i64;
    type IntDiv = i64;
    type Modulo = u64;
    type LeastSuper = i64;
}

impl ResultTypeOfBinary for (u64, f32) {
    type AddMul = f64;
    type Minus = f64;
    type IntDiv = i64;
    type Modulo = f64;
    type LeastSuper = f64;
}

impl ResultTypeOfBinary for (u64, f64) {
    type AddMul = f64;
    type Minus = f64;
    type IntDiv = i64;
    type Modulo = f64;
    type LeastSuper = f64;
}

impl ResultTypeOfBinary for (i8, u8) {
    type AddMul = i16;
    type Minus = i16;
    type IntDiv = i8;
    type Modulo = i16;
    type LeastSuper = i16;
}

impl ResultTypeOfBinary for (i8, u16) {
    type AddMul = i32;
    type Minus = i32;
    type IntDiv = i16;
    type Modulo = i32;
    type LeastSuper = i32;
}

impl ResultTypeOfBinary for (i8, u32) {
    type AddMul = i64;
    type Minus = i64;
    type IntDiv = i32;
    type Modulo = i64;
    type LeastSuper = i64;
}

impl ResultTypeOfBinary for (i8, u64) {
    type AddMul = i64;
    type Minus = i64;
    type IntDiv = i64;
    type Modulo = i64;
    type LeastSuper = i64;
}

impl ResultTypeOfBinary for (i8, i8) {
    type AddMul = i16;
    type Minus = i16;
    type IntDiv = i8;
    type Modulo = i16;
    type LeastSuper = i8;
}

impl ResultTypeOfBinary for (i8, i16) {
    type AddMul = i32;
    type Minus = i32;
    type IntDiv = i16;
    type Modulo = i32;
    type LeastSuper = i16;
}

impl ResultTypeOfBinary for (i8, i32) {
    type AddMul = i64;
    type Minus = i64;
    type IntDiv = i32;
    type Modulo = i64;
    type LeastSuper = i32;
}

impl ResultTypeOfBinary for (i8, i64) {
    type AddMul = i64;
    type Minus = i64;
    type IntDiv = i64;
    type Modulo = i64;
    type LeastSuper = i64;
}

impl ResultTypeOfBinary for (i8, f32) {
    type AddMul = f64;
    type Minus = f64;
    type IntDiv = i32;
    type Modulo = f64;
    type LeastSuper = f32;
}

impl ResultTypeOfBinary for (i8, f64) {
    type AddMul = f64;
    type Minus = f64;
    type IntDiv = i64;
    type Modulo = f64;
    type LeastSuper = f64;
}

impl ResultTypeOfBinary for (i16, u8) {
    type AddMul = i32;
    type Minus = i32;
    type IntDiv = i16;
    type Modulo = i16;
    type LeastSuper = i16;
}

impl ResultTypeOfBinary for (i16, u16) {
    type AddMul = i32;
    type Minus = i32;
    type IntDiv = i16;
    type Modulo = i32;
    type LeastSuper = i32;
}

impl ResultTypeOfBinary for (i16, u32) {
    type AddMul = i64;
    type Minus = i64;
    type IntDiv = i32;
    type Modulo = i64;
    type LeastSuper = i64;
}

impl ResultTypeOfBinary for (i16, u64) {
    type AddMul = i64;
    type Minus = i64;
    type IntDiv = i64;
    type Modulo = i64;
    type LeastSuper = i64;
}

impl ResultTypeOfBinary for (i16, i8) {
    type AddMul = i32;
    type Minus = i32;
    type IntDiv = i16;
    type Modulo = i16;
    type LeastSuper = i16;
}

impl ResultTypeOfBinary for (i16, i16) {
    type AddMul = i32;
    type Minus = i32;
    type IntDiv = i16;
    type Modulo = i32;
    type LeastSuper = i16;
}

impl ResultTypeOfBinary for (i16, i32) {
    type AddMul = i64;
    type Minus = i64;
    type IntDiv = i32;
    type Modulo = i64;
    type LeastSuper = i32;
}

impl ResultTypeOfBinary for (i16, i64) {
    type AddMul = i64;
    type Minus = i64;
    type IntDiv = i64;
    type Modulo = i64;
    type LeastSuper = i64;
}

impl ResultTypeOfBinary for (i16, f32) {
    type AddMul = f64;
    type Minus = f64;
    type IntDiv = i32;
    type Modulo = f64;
    type LeastSuper = f32;
}

impl ResultTypeOfBinary for (i16, f64) {
    type AddMul = f64;
    type Minus = f64;
    type IntDiv = i64;
    type Modulo = f64;
    type LeastSuper = f64;
}

impl ResultTypeOfBinary for (i32, u8) {
    type AddMul = i64;
    type Minus = i64;
    type IntDiv = i32;
    type Modulo = i16;
    type LeastSuper = i32;
}

impl ResultTypeOfBinary for (i32, u16) {
    type AddMul = i64;
    type Minus = i64;
    type IntDiv = i32;
    type Modulo = i32;
    type LeastSuper = i32;
}

impl ResultTypeOfBinary for (i32, u32) {
    type AddMul = i64;
    type Minus = i64;
    type IntDiv = i32;
    type Modulo = i64;
    type LeastSuper = i64;
}

impl ResultTypeOfBinary for (i32, u64) {
    type AddMul = i64;
    type Minus = i64;
    type IntDiv = i64;
    type Modulo = i64;
    type LeastSuper = i64;
}

impl ResultTypeOfBinary for (i32, i8) {
    type AddMul = i64;
    type Minus = i64;
    type IntDiv = i32;
    type Modulo = i16;
    type LeastSuper = i32;
}

impl ResultTypeOfBinary for (i32, i16) {
    type AddMul = i64;
    type Minus = i64;
    type IntDiv = i32;
    type Modulo = i32;
    type LeastSuper = i32;
}

impl ResultTypeOfBinary for (i32, i32) {
    type AddMul = i64;
    type Minus = i64;
    type IntDiv = i32;
    type Modulo = i64;
    type LeastSuper = i32;
}

impl ResultTypeOfBinary for (i32, i64) {
    type AddMul = i64;
    type Minus = i64;
    type IntDiv = i64;
    type Modulo = i64;
    type LeastSuper = i64;
}

impl ResultTypeOfBinary for (i32, f32) {
    type AddMul = f64;
    type Minus = f64;
    type IntDiv = i32;
    type Modulo = f64;
    type LeastSuper = f64;
}

impl ResultTypeOfBinary for (i32, f64) {
    type AddMul = f64;
    type Minus = f64;
    type IntDiv = i64;
    type Modulo = f64;
    type LeastSuper = f64;
}

impl ResultTypeOfBinary for (i64, u8) {
    type AddMul = i64;
    type Minus = i64;
    type IntDiv = i64;
    type Modulo = i16;
    type LeastSuper = i64;
}

impl ResultTypeOfBinary for (i64, u16) {
    type AddMul = i64;
    type Minus = i64;
    type IntDiv = i64;
    type Modulo = i32;
    type LeastSuper = i64;
}

impl ResultTypeOfBinary for (i64, u32) {
    type AddMul = i64;
    type Minus = i64;
    type IntDiv = i64;
    type Modulo = i64;
    type LeastSuper = i64;
}

impl ResultTypeOfBinary for (i64, u64) {
    type AddMul = i64;
    type Minus = i64;
    type IntDiv = i64;
    type Modulo = i64;
    type LeastSuper = i64;
}

impl ResultTypeOfBinary for (i64, i8) {
    type AddMul = i64;
    type Minus = i64;
    type IntDiv = i64;
    type Modulo = i16;
    type LeastSuper = i64;
}

impl ResultTypeOfBinary for (i64, i16) {
    type AddMul = i64;
    type Minus = i64;
    type IntDiv = i64;
    type Modulo = i32;
    type LeastSuper = i64;
}

impl ResultTypeOfBinary for (i64, i32) {
    type AddMul = i64;
    type Minus = i64;
    type IntDiv = i64;
    type Modulo = i64;
    type LeastSuper = i64;
}

impl ResultTypeOfBinary for (i64, i64) {
    type AddMul = i64;
    type Minus = i64;
    type IntDiv = i64;
    type Modulo = i64;
    type LeastSuper = i64;
}

impl ResultTypeOfBinary for (i64, f32) {
    type AddMul = f64;
    type Minus = f64;
    type IntDiv = i64;
    type Modulo = f64;
    type LeastSuper = f64;
}

impl ResultTypeOfBinary for (i64, f64) {
    type AddMul = f64;
    type Minus = f64;
    type IntDiv = i64;
    type Modulo = f64;
    type LeastSuper = f64;
}

impl ResultTypeOfBinary for (f32, u8) {
    type AddMul = f64;
    type Minus = f64;
    type IntDiv = i32;
    type Modulo = f64;
    type LeastSuper = f32;
}

impl ResultTypeOfBinary for (f32, u16) {
    type AddMul = f64;
    type Minus = f64;
    type IntDiv = i32;
    type Modulo = f64;
    type LeastSuper = f32;
}

impl ResultTypeOfBinary for (f32, u32) {
    type AddMul = f64;
    type Minus = f64;
    type IntDiv = i32;
    type Modulo = f64;
    type LeastSuper = f64;
}

impl ResultTypeOfBinary for (f32, u64) {
    type AddMul = f64;
    type Minus = f64;
    type IntDiv = i64;
    type Modulo = f64;
    type LeastSuper = f64;
}

impl ResultTypeOfBinary for (f32, i8) {
    type AddMul = f64;
    type Minus = f64;
    type IntDiv = i32;
    type Modulo = f64;
    type LeastSuper = f32;
}

impl ResultTypeOfBinary for (f32, i16) {
    type AddMul = f64;
    type Minus = f64;
    type IntDiv = i32;
    type Modulo = f64;
    type LeastSuper = f32;
}

impl ResultTypeOfBinary for (f32, i32) {
    type AddMul = f64;
    type Minus = f64;
    type IntDiv = i32;
    type Modulo = f64;
    type LeastSuper = f64;
}

impl ResultTypeOfBinary for (f32, i64) {
    type AddMul = f64;
    type Minus = f64;
    type IntDiv = i64;
    type Modulo = f64;
    type LeastSuper = f64;
}

impl ResultTypeOfBinary for (f32, f32) {
    type AddMul = f64;
    type Minus = f64;
    type IntDiv = i32;
    type Modulo = f64;
    type LeastSuper = f32;
}

impl ResultTypeOfBinary for (f32, f64) {
    type AddMul = f64;
    type Minus = f64;
    type IntDiv = i64;
    type Modulo = f64;
    type LeastSuper = f64;
}

impl ResultTypeOfBinary for (f64, u8) {
    type AddMul = f64;
    type Minus = f64;
    type IntDiv = i64;
    type Modulo = f64;
    type LeastSuper = f64;
}

impl ResultTypeOfBinary for (f64, u16) {
    type AddMul = f64;
    type Minus = f64;
    type IntDiv = i64;
    type Modulo = f64;
    type LeastSuper = f64;
}

impl ResultTypeOfBinary for (f64, u32) {
    type AddMul = f64;
    type Minus = f64;
    type IntDiv = i64;
    type Modulo = f64;
    type LeastSuper = f64;
}

impl ResultTypeOfBinary for (f64, u64) {
    type AddMul = f64;
    type Minus = f64;
    type IntDiv = i64;
    type Modulo = f64;
    type LeastSuper = f64;
}

impl ResultTypeOfBinary for (f64, i8) {
    type AddMul = f64;
    type Minus = f64;
    type IntDiv = i64;
    type Modulo = f64;
    type LeastSuper = f64;
}

impl ResultTypeOfBinary for (f64, i16) {
    type AddMul = f64;
    type Minus = f64;
    type IntDiv = i64;
    type Modulo = f64;
    type LeastSuper = f64;
}

impl ResultTypeOfBinary for (f64, i32) {
    type AddMul = f64;
    type Minus = f64;
    type IntDiv = i64;
    type Modulo = f64;
    type LeastSuper = f64;
}

impl ResultTypeOfBinary for (f64, i64) {
    type AddMul = f64;
    type Minus = f64;
    type IntDiv = i64;
    type Modulo = f64;
    type LeastSuper = f64;
}

impl ResultTypeOfBinary for (f64, f32) {
    type AddMul = f64;
    type Minus = f64;
    type IntDiv = i64;
    type Modulo = f64;
    type LeastSuper = f64;
}

impl ResultTypeOfBinary for (f64, f64) {
    type AddMul = f64;
    type Minus = f64;
    type IntDiv = i64;
    type Modulo = f64;
    type LeastSuper = f64;
}

impl ResultTypeOfUnary for u8 {
    type Negate = i16;
}

impl ResultTypeOfUnary for u16 {
    type Negate = i32;
}

impl ResultTypeOfUnary for u32 {
    type Negate = i64;
}

impl ResultTypeOfUnary for u64 {
    type Negate = i64;
}

impl ResultTypeOfUnary for i8 {
    type Negate = i8;
}

impl ResultTypeOfUnary for i16 {
    type Negate = i16;
}

impl ResultTypeOfUnary for i32 {
    type Negate = i32;
}

impl ResultTypeOfUnary for i64 {
    type Negate = i64;
}

impl ResultTypeOfUnary for f32 {
    type Negate = f32;
}

impl ResultTypeOfUnary for f64 {
    type Negate = f64;
}
